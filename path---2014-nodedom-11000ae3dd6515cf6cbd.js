webpackJsonp([0xff0e8feda3ea],{467:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Step Over",subtitle:"有趣的灵魂终会相遇",copyright:"© All rights reserved.",author:{name:"周骅",rss:"#",email:"zhou--hua@163.com",github:"zhouhua-js"}}},markdownRemark:{id:"/work/playground/zhouhua.site/src/pages/articles/2014/nodedom.md absPath of file >>> MarkdownRemark",html:'<p>Javascript之所以为Javascript，很重要的原因是浏览器为其实现了DOM和BOM接口（<a href="http://www.w3school.com.cn/js/pro_js_implement.asp">参考</a>）。但在Node.js环境下，并没有DOM和BOM，所以html文档与其他类型的文档并无不同，很难进行处理。而前端大量的js类库在Node.js环境下也毫无用武之地。这篇文档就来探究一下，如何在Node.js端进行DOM操作。</p>\n<h2>使用jsdom</h2>\n<p>虽然Node.js没有DOM支持，但我们可以自己构建一个DOM，而<code>jsdom</code>这个库就是用来帮助我们完成这个任务的，它使用javascript构建了符合W3标准的DOM。</p>\n<h3>安装</h3>\n<p>jsnode本身是javascript的，但它有一个依赖项<code>Contextify</code>是用C++编写的。这个依赖项的功能是处理页面内的<code>script</code>标签中的js代码，把javascript在一个独立的模拟浏览器环境下运行。所以这个依赖项提供了一个非常重要的特性。从Node.js中加载一个基于C++的模块，可能在windows下出现一些问题，如果在windows下安装不成功，请尝试安装32位版的Node.js再试。另外Node.js加载本地模块还需要Python的支持。</p>\n<ul>\n<li>\n<p>Windows</p>\n<ol>\n<li>请确认安装了visual studio;</li>\n<li>安装Python 2.7（<a href="http://www.python.org/download/">点击下载</a>），并把Python安装路径添加到系统变量；</li>\n<li>安装最新版的Node.js，最好是x86版本的（我用x64版本测试成功）；</li>\n<li>使用<code>npm install npm</code>更新npm到最新版本；</li>\n<li>使用<code>npm install jsdom</code>安装jsdom。</li>\n</ol>\n</li>\n<li>\n<p>Mac OS</p>\n<ol>\n<li>请确认安装了Xcode;</li>\n<li>需要安装“Command line tools for XCode”；</li>\n<li>启动过Xcode，并同意授权条款；</li>\n<li>使用<code>npm install jsdom</code>安装jsdom。</li>\n</ol>\n</li>\n<li>\n<p>Linux（文档不详，未验证）</p>\n<ol>\n<li>请确认安装了make等编译工具；</li>\n<li>使用<code>npm install jsdom</code>安装jsdom；</li>\n<li>使用make编译Contextify。</li>\n</ol>\n</li>\n</ul>\n<h3>简单模式</h3>\n<p>jsdom提供了<code>env()</code>方法可以很轻松地使用jsdom的强大功能。其定义如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>jsdom<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token punctuation">[</span>scripts<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>参数<code>string</code>：可以是一个url、文件名或HTML片断。</li>\n<li>参数<code>script</code>：类型为string或string数组，表示javascript文件的路径或url，这些javascript文件最后会通过<code>script</code>标签引用，并<strong>附加到body末尾</strong>。</li>\n<li>参数<code>config</code>：类似于jquery的一些函数参数列表的定义思路，<code>env()</code>允许不使用string、script、callback等参数，而直接传入一个config对象包含各种配置信息，当然，config中也可以定义一些其他的配置选项。</li>\n<li>\n<p>参数<code>callback</code>：回调方法，callback接受两个参数，<code>error</code>和<code>window</code>。</p>\n<ul>\n<li>参数<code>error</code>：可能是一个object，为初始化window时抛出的错误；也可能是一个数组，为DOM收集到的脚本错误。</li>\n<li>参数<code>window</code>：生成的一个全新的window对象。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>喜闻乐见的示例1：使用url</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> jsdom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsdom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\njsdom<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span>\n  <span class="token string">"http://nodejs.org/dist/"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">"http://code.jquery.com/jquery.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"there have been"</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"nodejs releases!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>此示例直接把要加载的html的url传入进行处理。注意传入的jquery完全是前端使用的js类型，不需要额外对引入的类库做任何处理即可在Node.js端使用它们进行文档处理。不过与前端代码稍有不同的是我们要留意此时window域内的方法对象并不能像在前端代码中那样直接获取，例如，我们并不能直接使用<code>$</code>，而是需要使用<code>window.$</code>，如果为了简便使用，可以定义好<code>var $=windwo.$</code>。</p>\n<hr>\n<p>喜闻乐见的示例2：使用html片断</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> jsdom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsdom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\njsdom<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span>\n  <span class="token string">\'&amp;lt;p&amp;gt;&amp;lt;a class="the-link" href="https://github.com/tmpvar/jsdom"&amp;gt;jsdom\\\'s Homepage&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">"http://code.jquery.com/jquery.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"contents of a.the-link:"</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a.the-link"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>类似的，我们可以通过Node.js的<code>fs</code>模块读取本地的view，再传入env()作处理。</p>\n<hr>\n<p>喜闻乐见的示例3：使用config对象</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> jsdom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsdom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> jquery <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"./jquery.js"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\njsdom<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token punctuation">:</span> <span class="token string">"http://news.ycombinator.com/"</span><span class="token punctuation">,</span>\n  src<span class="token punctuation">:</span> <span class="token punctuation">[</span>jquery<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  done<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> $ <span class="token operator">=</span> window<span class="token punctuation">.</span>$<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"HN Links"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"td.title:not(:last) a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>这个示例展示了通过config对象使用env()方法，这段代码同时也说明了javascript代码也是可以直接读取本地文件并插入到html内的。</p>\n<h3>高级模式</h3>\n<p>上面的用法应该已经能满足一定的需求，但它的不足在于不支持html代码中定义的外部script、img等资源。还有，在简单模式下，一次只能有一个window对象存在，不能同时处理多个文档。如果有这类的需要，我们可以使用高级模式。jsdom使用的高级模式的方法是<code>jsdom()</code>。请参见如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> jsdom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jsdom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>jsdom<span class="token punctuation">;</span>\n<span class="token keyword">var</span> doc <span class="token operator">=</span> <span class="token function">jsdom</span><span class="token punctuation">(</span>markup<span class="token punctuation">,</span> level<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> window <span class="token operator">=</span> doc<span class="token punctuation">.</span>parentWindow<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>与简单模式不同的是，它不是采用异步回调的方式，而是采用同步的方式，直接将window对象暴露出来，这意味着在同一段代码域中，可以有多个完全隔离的window对象，可以同时处理多个文档。第二行向jsdom()方法传入了三个参数：</p>\n<ul>\n<li>参数<code>markup</code>：markup表示是的传入的HTML/XML文档（文档片断或空字符串也支持），我们也可以传入null或undefined来生成空白的html文档。</li>\n<li>参数<code>level</code>：指定DOM级别，默认是DOM 3级。</li>\n<li>\n<p>参数<code>option</code>：option对象与简单模式下的option参数基本相同，不过它拥有一个<code>features</code>选项控制着对外部资源的加载情况，具体如下：</p>\n<ul>\n<li>\n<p><code>FetchExternalResources</code></p>\n<ul>\n<li>默认值：<code>["script"]</code></li>\n<li>允许值：<code>["script", "img", "css", "frame", "iframe", "link"]</code>或<code>false</code>\n——是否允许从文件系统或网络获取文件，以及什么类型的文件。</li>\n</ul>\n</li>\n<li>\n<p><code>ProcessExternalResources</code></p>\n<ul>\n<li>默认值：<code>["script"]</code></li>\n<li>允许值：<code>["script"]</code>或<code>false</code>\n——是否允许执行外部脚本。</li>\n</ul>\n</li>\n<li>\n<p><code>SkipExternalResources</code></p>\n<ul>\n<li>默认值：<code>false</code></li>\n<li>允许值：<code>/url/</code>或<code>false</code>\n——指定不下载、不执行的资源URL的正则。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Canvas支持</h3>\n<p>jsdom本身不对canvas支持，会把它当成div处理，如果需要支持canvas，则需要添加<code>canvas</code>包，安装方法（<a href="https://www.npmjs.org/package/canvas">点击查看详情</a>）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> canvas\n</code></pre>\n      </div>\n<h3>注意事项</h3>\n<ol>\n<li>\n<p>区分两种window\n使用jsdom确实能模拟出一个window，让我们能在Node.js端书写前端代码，但一定要区分这个window与浏览器运行时的window对象不是一回事。在浏览器渲染页面时，浏览器找不到我们定义在Node.js端window上的函数、变量。在Node.js端进行的一些事件绑定也只会绑到模拟出来的dom上，浏览器呈现的时候并不会具有这些事件的绑定。</p>\n</li>\n<li>\n<p>script参数指定的javascript永远在body最末\n虽然没有看到具体文档说明，但在我测试下来呈现这样的情况，因此，如果有多个javascript、多种引入方式，特别是在Node.js端向html插入script节点时，特别要注意先后依赖关系，建议不要通过script参数传入js文件，而是直接以script标签写在html中。</p>\n</li>\n<li>\n<p>jsdom似乎不支持ajax\n没有在jsdom中看到有关xmlHttpRequest的实现，测试结果也是无法使用ajax。可能需要针对Node.js重写zepto的ajax方法。</p>\n</li>\n</ol>',excerpt:"Javascript之所以为Javascript，很重要的原因是浏览器为其实现了DOM和BOM接口（ 参考 ）。但在Node.js环境下，并没有DOM和BOM，所以html文档与其他类型的文档并无不同，很难进行处理。而前端大量的js类库在Node.js…",fields:{tagSlugs:["/tags/dom/","/tags/jsdom/","/tags/node-js/"]},frontmatter:{title:"如何在Node.js环境下操作DOM",tags:["dom","jsdom","Node.js"],date:"2014-03-05T22:32:36.000Z",description:null}}},pathContext:{slug:"/2014/nodedom/"}}}});
//# sourceMappingURL=path---2014-nodedom-11000ae3dd6515cf6cbd.js.map