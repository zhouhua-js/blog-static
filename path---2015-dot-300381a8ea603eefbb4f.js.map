{"version":3,"sources":["webpack:///path---2015-dot-300381a8ea603eefbb4f.js","webpack:///./.cache/json/2015-dot.json"],"names":["webpackJsonp","474","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","rss","email","github","markdownRemark","id","html","excerpt","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,SAAA,YAAAC,UAAA,yBAAAC,QAA0FC,KAAA,KAAAC,IAAA,IAAAC,MAAA,oBAAAC,OAAA,gBAA0EC,gBAAmBC,GAAA,kGAAAC,KAAA,gpFAAmsFC,QAAA,2FAAAC,QAA8NC,UAAA,mDAA8DC,aAAgBd,MAAA,eAAAe,MAAA,6BAAAC,KAAA,2BAAAC,YAAA,QAAmHC,aAAgBC,KAAA","file":"path---2015-dot-300381a8ea603eefbb4f.js","sourcesContent":["webpackJsonp([137584901379585],{\n\n/***/ 474:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Step Over\",\"subtitle\":\"有趣的灵魂终会相遇\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"周骅\",\"rss\":\"#\",\"email\":\"zhou--hua@163.com\",\"github\":\"zhouhua-js\"}}},\"markdownRemark\":{\"id\":\"/work/playground/zhouhua.site/src/pages/articles/2015/dot.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>好久没更新内容了，今天分享一个小的知识点，一个正则表达式方面的很容易被人忽视的坑。</p></p>\\n<p>我们知道，正则表达式中，可以用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 表示任意单个字符，但在underscore和jquery的源代码中，我们可以看到，这些著名类库的代码中，经常并不是用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 来表示任意字符，而是使用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\w\\\\W]</pre>\\n<p> 或者</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\s\\\\S]</pre>\\n<p> 。乍一看，好像表达的含义是一样的，可是为什么放着简单的方法不用，而去多绕个圈子？今天就简单说说这个问题。</p>\\n<p>首先我们必须要正确理解</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 的含义。其实说它表示任意单个字符，可能会让人产生误解，必须要强调一下，这个“任意单个字符”不包括控制换行的字符，也就是不包含</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\n</pre>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\r</pre>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\u2028</pre>\\n<p> 或</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\u2029</pre>\\n<p> 这几个字符。而</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\W</pre>\\n<p> 和</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\s</pre>\\n<p> 中是能够包含这些字符的。那个这两种写法的差异也就很清晰了，就是能否匹配到几个换行控制符的差异。</p>\\n<p>那么在什么时候我们需要考虑这几个换行控制符呢？当要处理的字符串可能包含换行时。这样的情景太多了，处理html字符串、处理template、nodejs读取文本等等。</p>\\n<p>提及多行文本的场景，我们很容易想到正则表达式的</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >m</pre>\\n<p> 模式（多行模式）。那么多行模式对我们今天讨论的问题有影响吗？我不是很确定。为什么不确定呢？有些人信誓旦旦地声称单行模式下</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 的含义与多行模式下不同，单选模式下等同于</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\w\\\\W]</pre>\\n<p> 或者</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\s\\\\S]</pre>\\n<p> ，而多行模式下会排除换行控制符。但据我试验，以及参考MDN的说法，这是不对的。的确有很多语言的正则表达式会有上述特性，但在javascript中我没有看到，不知道会不会有浏览器方面的差异。那么多行模式对于javascript而言影响的是什么呢？我认为仅仅是改变了</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >^</pre>\\n<p> 和</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >$</pre>\\n<p> 标识的含义：单行模式下，分别表示整个字符串的开始的结尾；多行模式下表示每一行的开始和结尾。而不管多行模式还是单行模式，我认为</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 都是不包含换行控制字符的，等价于</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[^\\\\n\\\\r\\\\u2028\\\\u2029]</pre>\\n<p> 。</p>\\n<p>再多延伸一点点，对于<strong>现代浏览器</strong>，可以直接用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[^]</pre>\\n<p>来匹配任意字符的。</p>\\n<p>例子程序不想写了，有兴趣的可以自己试验一下，分别用</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/.&#42;/g</pre>\\n<p> 、</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/^.&#42;$/g</pre>\\n<p> 、</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/.&#42;/gm</pre>\\n<p> 、</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/^.&#42;$/gm</pre>\\n<p> 来匹配一下</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >\\\"abc\\\\nedf\\\"</pre>\\n<p> ，其中道理不言自明。</p>\",\"excerpt\":\"好久没更新内容了，今天分享一个小的知识点，一个正则表达式方面的很容易被人忽视的坑。 我们知道，正则表达式中，可以用  表示任意单个字符，但在underscore和jquery…\",\"fields\":{\"tagSlugs\":[\"/tags/javascript/\",\"/tags/多行模式/\",\"/tags/正则表达式/\"]},\"frontmatter\":{\"title\":\"谈谈正则表达式中的“.”\",\"tags\":[\"Javascript\",\"多行模式\",\"正则表达式\"],\"date\":\"2015-05-07T23:57:29.000Z\",\"description\":null}}},\"pathContext\":{\"slug\":\"/2015/dot/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2015-dot-300381a8ea603eefbb4f.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Step Over\",\"subtitle\":\"有趣的灵魂终会相遇\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"周骅\",\"rss\":\"#\",\"email\":\"zhou--hua@163.com\",\"github\":\"zhouhua-js\"}}},\"markdownRemark\":{\"id\":\"/work/playground/zhouhua.site/src/pages/articles/2015/dot.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>好久没更新内容了，今天分享一个小的知识点，一个正则表达式方面的很容易被人忽视的坑。</p></p>\\n<p>我们知道，正则表达式中，可以用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 表示任意单个字符，但在underscore和jquery的源代码中，我们可以看到，这些著名类库的代码中，经常并不是用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 来表示任意字符，而是使用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\w\\\\W]</pre>\\n<p> 或者</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\s\\\\S]</pre>\\n<p> 。乍一看，好像表达的含义是一样的，可是为什么放着简单的方法不用，而去多绕个圈子？今天就简单说说这个问题。</p>\\n<p>首先我们必须要正确理解</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 的含义。其实说它表示任意单个字符，可能会让人产生误解，必须要强调一下，这个“任意单个字符”不包括控制换行的字符，也就是不包含</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\n</pre>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\r</pre>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\u2028</pre>\\n<p> 或</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\u2029</pre>\\n<p> 这几个字符。而</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\W</pre>\\n<p> 和</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >\\\\s</pre>\\n<p> 中是能够包含这些字符的。那个这两种写法的差异也就很清晰了，就是能否匹配到几个换行控制符的差异。</p>\\n<p>那么在什么时候我们需要考虑这几个换行控制符呢？当要处理的字符串可能包含换行时。这样的情景太多了，处理html字符串、处理template、nodejs读取文本等等。</p>\\n<p>提及多行文本的场景，我们很容易想到正则表达式的</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >m</pre>\\n<p> 模式（多行模式）。那么多行模式对我们今天讨论的问题有影响吗？我不是很确定。为什么不确定呢？有些人信誓旦旦地声称单行模式下</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 的含义与多行模式下不同，单选模式下等同于</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\w\\\\W]</pre>\\n<p> 或者</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[\\\\s\\\\S]</pre>\\n<p> ，而多行模式下会排除换行控制符。但据我试验，以及参考MDN的说法，这是不对的。的确有很多语言的正则表达式会有上述特性，但在javascript中我没有看到，不知道会不会有浏览器方面的差异。那么多行模式对于javascript而言影响的是什么呢？我认为仅仅是改变了</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >^</pre>\\n<p> 和</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >$</pre>\\n<p> 标识的含义：单行模式下，分别表示整个字符串的开始的结尾；多行模式下表示每一行的开始和结尾。而不管多行模式还是单行模式，我认为</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >.</pre>\\n<p> 都是不包含换行控制字符的，等价于</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[^\\\\n\\\\r\\\\u2028\\\\u2029]</pre>\\n<p> 。</p>\\n<p>再多延伸一点点，对于<strong>现代浏览器</strong>，可以直接用</p>\\n<pre class=\\\"lang:js highlight:0 decode:1 inline:1 \\\" >[^]</pre>\\n<p>来匹配任意字符的。</p>\\n<p>例子程序不想写了，有兴趣的可以自己试验一下，分别用</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/.&#42;/g</pre>\\n<p> 、</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/^.&#42;$/g</pre>\\n<p> 、</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/.&#42;/gm</pre>\\n<p> 、</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >/^.&#42;$/gm</pre>\\n<p> 来匹配一下</p>\\n<pre class=\\\"lang:js decode:1 inline:1 \\\" >\\\"abc\\\\nedf\\\"</pre>\\n<p> ，其中道理不言自明。</p>\",\"excerpt\":\"好久没更新内容了，今天分享一个小的知识点，一个正则表达式方面的很容易被人忽视的坑。 我们知道，正则表达式中，可以用  表示任意单个字符，但在underscore和jquery…\",\"fields\":{\"tagSlugs\":[\"/tags/javascript/\",\"/tags/多行模式/\",\"/tags/正则表达式/\"]},\"frontmatter\":{\"title\":\"谈谈正则表达式中的“.”\",\"tags\":[\"Javascript\",\"多行模式\",\"正则表达式\"],\"date\":\"2015-05-07T23:57:29.000Z\",\"description\":null}}},\"pathContext\":{\"slug\":\"/2015/dot/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2015-dot.json\n// module id = 474\n// module chunks = 137584901379585"],"sourceRoot":""}