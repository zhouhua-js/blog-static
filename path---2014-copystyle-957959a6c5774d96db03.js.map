{"version":3,"sources":["webpack:///path---2014-copystyle-957959a6c5774d96db03.js","webpack:///./.cache/json/2014-copystyle.json"],"names":["webpackJsonp","465","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","rss","email","github","markdownRemark","id","html","excerpt","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,SAAA,YAAAC,UAAA,yBAAAC,QAA0FC,KAAA,KAAAC,IAAA,IAAAC,MAAA,oBAAAC,OAAA,gBAA0EC,gBAAmBC,GAAA,wGAAAC,KAAA,2oQAAi5QC,QAAA,oIAAAC,QAAgQC,UAAA,6EAAwFC,aAAgBd,MAAA,WAAAe,MAAA,8CAAAC,KAAA,2BAAAC,YAAA,QAAgIC,aAAgBC,KAAA","file":"path---2014-copystyle-957959a6c5774d96db03.js","sourcesContent":["webpackJsonp([8547206564714],{\n\n/***/ 465:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Step Over\",\"subtitle\":\"有趣的灵魂终会相遇\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"周骅\",\"rss\":\"#\",\"email\":\"zhou--hua@163.com\",\"github\":\"zhouhua-js\"}}},\"markdownRemark\":{\"id\":\"/work/playground/zhouhua.site/src/pages/articles/2014/copystyle.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>技能get√</h2>\\n<p>先说一个需求，我想给一个元素应用另外一个指定元素的样式，应该怎么做？对于一个特定的项目，我想通常做法是规范代码风格，直接把class复制过来就可以了。但现实情况可能并不会如此简单。比如我们假定这个指定元素是不可预测的，它的样式可能由class控制，也可能由更复杂的选择器控制，甚至可能写在style属性里。这该怎么办呢？</p>\\n<p>过程就懒得说了，直接说结论吧。上代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>window<span class=\\\"token punctuation\\\">.</span>getComputedStyle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getComputedStyle</span><span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">.</span>currentStyle<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"A\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// source node</span>\\n<span class=\\\"token keyword\\\">var</span> b<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"B\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// target node</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>代码很短，先看最后一句，我们用<code>window.getComputedStyle()</code>方法来获取一个节点的最终样式。OK，也许你没有用过这个方法，但作为一个FE，你一定见过下面这个画面：</p>\\n<p> <img src=\\\"computedStyle.png\\\">\\n图1： Computed Style 截图</p>\\n<p>这是在chrome的开发者工具中，通过element选项卡可以查看dom节点样式的截图，红框中的就是这个节点最终样式的计算结果。而<code>window.getComputedStyle()</code>就是BOM提供给大家得到这样一个计算结果的接口。那么剩下的就好理解的，通过<code>window.getComputedStyle()</code>方法拿到指定元素的最终样式集，这个结果呢又正好是一个<code>$.css()</code>方法能接受的对象（这个对象下面会讲）。于是上述代码中，我们通过<code>$.css()</code>方法直接将样式覆盖给了目标元素。当然，如果不想用jquery，我们也可以通过遍历这个对象，并操作目标元素的style属性达到目的，代码就不贴了。</p>\\n<h2><code>window.getComputedStyle()</code></h2>\\n<p>知道了这种做法，我们再来好好研究一下<code>window.getComputedStyle()</code>这个方法。</p>\\n<blockquote>\\n<p>The <code>Window.getComputedStyle()</code> method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.</p>\\n</blockquote>\\n<p><code>window.getComputedStyle(element [, pseudoElt])</code>最多接受两个参数，第一个参数<code>element</code>是我们想要获取样式的dom节点，这个参数是必须的，仅有这一个参数呢是这个方法的基本用法。但css3中添加了<a href=\\\"http://dev.w3.org/csswg/css-content/#pseudo-elements\\\">伪元素</a>的支持，第二个参数正是用来指定伪元素的。我们可以传递像”:before”、”:after”之类的值。</p>\\n<blockquote>\\n<p>有些技术文章把第二个参数解读成伪类，经我验证，这是不对的，伪类的样式是无法通过这种方式获取的。</p>\\n</blockquote>\\n<p>至于这种做法的兼容性，相信你也能猜到：IE6-8是不支持的。对伪元素的支持情况会更糟一些。</p>\\n<p>表1：浏览器对<code>window.getComputedStyle()</code>的支持情况</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"right\\\">特性</th>\\n<th align=\\\"center\\\">Chrome</th>\\n<th align=\\\"center\\\">FireFox</th>\\n<th align=\\\"center\\\">IE</th>\\n<th align=\\\"center\\\">Opera</th>\\n<th align=\\\"center\\\">Safari</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"right\\\"><strong>基本支持</strong></td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">>=9</td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">支持</td>\\n</tr>\\n<tr>\\n<td align=\\\"right\\\"><strong>伪元素支持</strong></td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">>=11</td>\\n<td align=\\\"center\\\">不支持</td>\\n<td align=\\\"center\\\">支持</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>又是苦逼的IE。不过这次问题不算大。不知道你还记不记得代码最上面几行？回过头去看一眼：对于IE，我们用了<code>element.currentStyle</code>属性，同样可以满足我们的需求。所以如果不涉及伪元素，配合示例代码里的shim，我们应该可以没有顾虑地使用<code>window.getComputedStyle()</code>。</p>\\n<p>很多地方（例如以前的Jquery）在使用<code>window.getComputedStyle()</code>时并没有直接在<code>window</code>上调用，而是使用的<code>window.defaultView.getComputedStyle()</code>。事实上现在我们可以认为<code>window.defaultView</code>就是<code>window</code>。Jquery也将这部分代码修改了，见<a href=\\\"https://github.com/jquery/jquery/pull/524\\\">jquery #10373</a>。可能会在IE的弹出窗口和低版本Firefox的frames中使用会有一些异常。Jquery认为在IE弹出窗口中使用必须加<code>defaultView</code>，而Firefox的情况则不可以加<code>defailtView</code>，于是做了一个shim，可以排除两种异常。可以参考下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> elem <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Support: IE less than 11+, Firefox less than 30+ (#15098, #14150)</span>\\n        <span class=\\\"token comment\\\">// IE throws on elements created in popups</span>\\n        <span class=\\\"token comment\\\">// FF meanwhile throws on frame elements through \\\"defaultView.getComputedStyle\\\"</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> elem<span class=\\\"token punctuation\\\">.</span>ownerDocument<span class=\\\"token punctuation\\\">.</span>defaultView<span class=\\\"token punctuation\\\">.</span>opener <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> elem<span class=\\\"token punctuation\\\">.</span>ownerDocument<span class=\\\"token punctuation\\\">.</span>defaultView<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span> elem<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span> elem<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>更详细的内容有兴趣的朋友可以参考：</p>\\n<ul>\\n<li><a href=\\\"http://bugs.jquery.com/ticket/14150\\\">jquery #14150</a></li>\\n<li><a href=\\\"http://bugs.jquery.com/ticket/15098\\\">jquery #15098</a></li>\\n</ul>\\n<h2>CSSStyleDeclaration</h2>\\n<p>再来说说<code>window.getComputedStyle()</code>的返回值。<code>window.getComputedStyle()</code>会返回一个<code>CSSStyleDeclaration</code>对象。这个对象是只读的，意味着我们只能取其值，不能为其赋值。所以上面的示例代码中我们采用<code>$.css()</code>方法来设置css样式。这个对象应该如何用，这篇文章里面我不想赘述，有兴趣的可以参考<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\\\">MDN的文档</a>。想直观了解这个对象长什么样子的同学请点击F12键，我在浏览器的console里输出了一个<code>CSSStyleDeclaration</code>对象。</p>\\n<script>\\n    if(!window.getComputedStyle){\\n        window.getComputedStyle=function(node){\\n            return node.currentStyle;\\n        }\\n    }\\n    console.info(\\\"CSSStyleDeclaration对象的示例：\\\");\\n    console.dir(window.getComputedStyle(document.body));\\n</script>\\n<p>最后提醒下不同浏览器下，css的属性名可能有差异，如比较突出的cssFloat/styleFloat/float，jquery可以屏蔽掉浏览器这方面的差异，推荐之。</p>\",\"excerpt\":\"技能get√ 先说一个需求，我想给一个元素应用另外一个指定元素的样式，应该怎么做？对于一个特定的项目，我想通常做法是规范代码风格，直接把class复制过来就可以了。但现实情况可能并不会如此简单。比如我们假定这个指定元素是不可预测的，它的样式可能由class…\",\"fields\":{\"tagSlugs\":[\"/tags/css/\",\"/tags/get-computed-style/\",\"/tags/javascript/\",\"/tags/前端开发/\"]},\"frontmatter\":{\"title\":\"另辟蹊径复制样式\",\"tags\":[\"CSS\",\"getComputedStyle\",\"Javascript\",\"前端开发\"],\"date\":\"2014-08-20T22:49:26.000Z\",\"description\":null}}},\"pathContext\":{\"slug\":\"/2014/copystyle/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2014-copystyle-957959a6c5774d96db03.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Step Over\",\"subtitle\":\"有趣的灵魂终会相遇\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"周骅\",\"rss\":\"#\",\"email\":\"zhou--hua@163.com\",\"github\":\"zhouhua-js\"}}},\"markdownRemark\":{\"id\":\"/work/playground/zhouhua.site/src/pages/articles/2014/copystyle.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>技能get√</h2>\\n<p>先说一个需求，我想给一个元素应用另外一个指定元素的样式，应该怎么做？对于一个特定的项目，我想通常做法是规范代码风格，直接把class复制过来就可以了。但现实情况可能并不会如此简单。比如我们假定这个指定元素是不可预测的，它的样式可能由class控制，也可能由更复杂的选择器控制，甚至可能写在style属性里。这该怎么办呢？</p>\\n<p>过程就懒得说了，直接说结论吧。上代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>window<span class=\\\"token punctuation\\\">.</span>getComputedStyle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getComputedStyle</span><span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">.</span>currentStyle<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"A\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// source node</span>\\n<span class=\\\"token keyword\\\">var</span> b<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"B\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// target node</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">css</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>代码很短，先看最后一句，我们用<code>window.getComputedStyle()</code>方法来获取一个节点的最终样式。OK，也许你没有用过这个方法，但作为一个FE，你一定见过下面这个画面：</p>\\n<p> <img src=\\\"computedStyle.png\\\">\\n图1： Computed Style 截图</p>\\n<p>这是在chrome的开发者工具中，通过element选项卡可以查看dom节点样式的截图，红框中的就是这个节点最终样式的计算结果。而<code>window.getComputedStyle()</code>就是BOM提供给大家得到这样一个计算结果的接口。那么剩下的就好理解的，通过<code>window.getComputedStyle()</code>方法拿到指定元素的最终样式集，这个结果呢又正好是一个<code>$.css()</code>方法能接受的对象（这个对象下面会讲）。于是上述代码中，我们通过<code>$.css()</code>方法直接将样式覆盖给了目标元素。当然，如果不想用jquery，我们也可以通过遍历这个对象，并操作目标元素的style属性达到目的，代码就不贴了。</p>\\n<h2><code>window.getComputedStyle()</code></h2>\\n<p>知道了这种做法，我们再来好好研究一下<code>window.getComputedStyle()</code>这个方法。</p>\\n<blockquote>\\n<p>The <code>Window.getComputedStyle()</code> method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.</p>\\n</blockquote>\\n<p><code>window.getComputedStyle(element [, pseudoElt])</code>最多接受两个参数，第一个参数<code>element</code>是我们想要获取样式的dom节点，这个参数是必须的，仅有这一个参数呢是这个方法的基本用法。但css3中添加了<a href=\\\"http://dev.w3.org/csswg/css-content/#pseudo-elements\\\">伪元素</a>的支持，第二个参数正是用来指定伪元素的。我们可以传递像”:before”、”:after”之类的值。</p>\\n<blockquote>\\n<p>有些技术文章把第二个参数解读成伪类，经我验证，这是不对的，伪类的样式是无法通过这种方式获取的。</p>\\n</blockquote>\\n<p>至于这种做法的兼容性，相信你也能猜到：IE6-8是不支持的。对伪元素的支持情况会更糟一些。</p>\\n<p>表1：浏览器对<code>window.getComputedStyle()</code>的支持情况</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"right\\\">特性</th>\\n<th align=\\\"center\\\">Chrome</th>\\n<th align=\\\"center\\\">FireFox</th>\\n<th align=\\\"center\\\">IE</th>\\n<th align=\\\"center\\\">Opera</th>\\n<th align=\\\"center\\\">Safari</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"right\\\"><strong>基本支持</strong></td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">>=9</td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">支持</td>\\n</tr>\\n<tr>\\n<td align=\\\"right\\\"><strong>伪元素支持</strong></td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">支持</td>\\n<td align=\\\"center\\\">>=11</td>\\n<td align=\\\"center\\\">不支持</td>\\n<td align=\\\"center\\\">支持</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>又是苦逼的IE。不过这次问题不算大。不知道你还记不记得代码最上面几行？回过头去看一眼：对于IE，我们用了<code>element.currentStyle</code>属性，同样可以满足我们的需求。所以如果不涉及伪元素，配合示例代码里的shim，我们应该可以没有顾虑地使用<code>window.getComputedStyle()</code>。</p>\\n<p>很多地方（例如以前的Jquery）在使用<code>window.getComputedStyle()</code>时并没有直接在<code>window</code>上调用，而是使用的<code>window.defaultView.getComputedStyle()</code>。事实上现在我们可以认为<code>window.defaultView</code>就是<code>window</code>。Jquery也将这部分代码修改了，见<a href=\\\"https://github.com/jquery/jquery/pull/524\\\">jquery #10373</a>。可能会在IE的弹出窗口和低版本Firefox的frames中使用会有一些异常。Jquery认为在IE弹出窗口中使用必须加<code>defaultView</code>，而Firefox的情况则不可以加<code>defailtView</code>，于是做了一个shim，可以排除两种异常。可以参考下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> elem <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Support: IE less than 11+, Firefox less than 30+ (#15098, #14150)</span>\\n        <span class=\\\"token comment\\\">// IE throws on elements created in popups</span>\\n        <span class=\\\"token comment\\\">// FF meanwhile throws on frame elements through \\\"defaultView.getComputedStyle\\\"</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> elem<span class=\\\"token punctuation\\\">.</span>ownerDocument<span class=\\\"token punctuation\\\">.</span>defaultView<span class=\\\"token punctuation\\\">.</span>opener <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> elem<span class=\\\"token punctuation\\\">.</span>ownerDocument<span class=\\\"token punctuation\\\">.</span>defaultView<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span> elem<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span> elem<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>更详细的内容有兴趣的朋友可以参考：</p>\\n<ul>\\n<li><a href=\\\"http://bugs.jquery.com/ticket/14150\\\">jquery #14150</a></li>\\n<li><a href=\\\"http://bugs.jquery.com/ticket/15098\\\">jquery #15098</a></li>\\n</ul>\\n<h2>CSSStyleDeclaration</h2>\\n<p>再来说说<code>window.getComputedStyle()</code>的返回值。<code>window.getComputedStyle()</code>会返回一个<code>CSSStyleDeclaration</code>对象。这个对象是只读的，意味着我们只能取其值，不能为其赋值。所以上面的示例代码中我们采用<code>$.css()</code>方法来设置css样式。这个对象应该如何用，这篇文章里面我不想赘述，有兴趣的可以参考<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\\\">MDN的文档</a>。想直观了解这个对象长什么样子的同学请点击F12键，我在浏览器的console里输出了一个<code>CSSStyleDeclaration</code>对象。</p>\\n<script>\\n    if(!window.getComputedStyle){\\n        window.getComputedStyle=function(node){\\n            return node.currentStyle;\\n        }\\n    }\\n    console.info(\\\"CSSStyleDeclaration对象的示例：\\\");\\n    console.dir(window.getComputedStyle(document.body));\\n</script>\\n<p>最后提醒下不同浏览器下，css的属性名可能有差异，如比较突出的cssFloat/styleFloat/float，jquery可以屏蔽掉浏览器这方面的差异，推荐之。</p>\",\"excerpt\":\"技能get√ 先说一个需求，我想给一个元素应用另外一个指定元素的样式，应该怎么做？对于一个特定的项目，我想通常做法是规范代码风格，直接把class复制过来就可以了。但现实情况可能并不会如此简单。比如我们假定这个指定元素是不可预测的，它的样式可能由class…\",\"fields\":{\"tagSlugs\":[\"/tags/css/\",\"/tags/get-computed-style/\",\"/tags/javascript/\",\"/tags/前端开发/\"]},\"frontmatter\":{\"title\":\"另辟蹊径复制样式\",\"tags\":[\"CSS\",\"getComputedStyle\",\"Javascript\",\"前端开发\"],\"date\":\"2014-08-20T22:49:26.000Z\",\"description\":null}}},\"pathContext\":{\"slug\":\"/2014/copystyle/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2014-copystyle.json\n// module id = 465\n// module chunks = 8547206564714"],"sourceRoot":""}